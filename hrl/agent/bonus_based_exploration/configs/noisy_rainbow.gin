# Hyperparameters for NoisyRainbow they follow those of Hessel et al. (2018), except for sticky_actions.
# which was False (not using sticky actions) in the original paper.
import dopamine.discrete_domains.atari_lib
import dopamine.replay_memory.prioritized_replay_buffer
import bonus_based_exploration.noisy_networks.noisy_rainbow_agent
import bonus_based_exploration.run_experiment
import gin.tf.external_configurables

create_exploration_agent.agent_name = 'noisy_rainbow'

NoisyRainbowAgent.num_atoms = 51
NoisyRainbowAgent.vmax = 10.
NoisyRainbowAgent.gamma = 0.99
NoisyRainbowAgent.update_horizon = 3
NoisyRainbowAgent.min_replay_history = 20000  # agent steps
NoisyRainbowAgent.update_period = 4
NoisyRainbowAgent.target_update_period = 8000  # agent steps
NoisyRainbowAgent.replay_scheme = 'prioritized'
NoisyRainbowAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
NoisyRainbowAgent.optimizer = @tf.train.AdamOptimizer()
NoisyRainbowAgent.noise_distribution = %NoiseDistribution.FACTORISED

# Note these parameters are different from C51's.
tf.train.AdamOptimizer.learning_rate = 0.0000625
tf.train.AdamOptimizer.epsilon = 0.00015

atari_lib.create_atari_environment.game_name = 'MontezumaRevenge'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
Runner.num_iterations = 200
Runner.training_steps = 250000  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

WrappedPrioritizedReplayBuffer.replay_capacity = 1000000
WrappedPrioritizedReplayBuffer.batch_size = 32

# Hyperparameters used for reporting DQN results in Bellemare et al. (2017).
import dopamine.discrete_domains.atari_lib
import dopamine.replay_memory.circular_replay_buffer
import bonus_based_exploration.intrinsic_motivation.intrinsic_dqn_agent
import bonus_based_exploration.intrinsic_motivation.intrinsic_rewards
import bonus_based_exploration.run_experiment
import gin.tf.external_configurables

create_exploration_agent.agent_name = 'dqn_pixelcnn'

PixelCNNDQNAgent.gamma = 0.99
PixelCNNDQNAgent.update_horizon = 1
PixelCNNDQNAgent.min_replay_history = 50000  # agent steps
PixelCNNDQNAgent.update_period = 4
PixelCNNDQNAgent.target_update_period = 10000  # agent steps
PixelCNNDQNAgent.epsilon_train = 0.01
PixelCNNDQNAgent.epsilon_eval = 0.001
PixelCNNDQNAgent.epsilon_decay_period = 1000000  # agent steps
PixelCNNDQNAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
PixelCNNDQNAgent.optimizer = @agent/tf.train.RMSPropOptimizer()

agent/tf.train.RMSPropOptimizer.learning_rate = 0.00025
agent/tf.train.RMSPropOptimizer.decay = 0.95
agent/tf.train.RMSPropOptimizer.momentum = 0.0
agent/tf.train.RMSPropOptimizer.epsilon = 0.00001
agent/tf.train.RMSPropOptimizer.centered = True

# Parameters for the agent density model
_network_template.num_layers = 2
_network_template.hidden_units = 16
PixelCNNIntrinsicReward.reward_scale = 0.001
PixelCNNIntrinsicReward.ipd_scale = 0.1
PixelCNNIntrinsicReward.observation_shape = (84, 84)
PixelCNNIntrinsicReward.resize_shape = (42, 42)
PixelCNNIntrinsicReward.tf_device = '/gpu:0'
PixelCNNIntrinsicReward.optimizer = @tf.train.RMSPropOptimizer()

tf.train.RMSPropOptimizer.learning_rate = 0.0001
tf.train.RMSPropOptimizer.momentum = 0.9
tf.train.RMSPropOptimizer.epsilon = 0.0001


atari_lib.create_atari_environment.game_name = 'MontezumaRevenge'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
Runner.num_iterations = 200
Runner.training_steps = 250000  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

WrappedReplayBuffer.replay_capacity = 1000000
WrappedReplayBuffer.batch_size = 32

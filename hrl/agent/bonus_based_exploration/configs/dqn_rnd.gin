# Hyperparameters used for reporting DQN results in Bellemare et al. (2017).
import dopamine.discrete_domains.atari_lib
import dopamine.replay_memory.circular_replay_buffer
import bonus_based_exploration.intrinsic_motivation.intrinsic_dqn_agent
import bonus_based_exploration.intrinsic_motivation.intrinsic_rewards
import bonus_based_exploration.run_experiment
import gin.tf.external_configurables

create_exploration_agent.agent_name = 'dqn_rnd'

RNDDQNAgent.gamma = 0.99
RNDDQNAgent.update_horizon = 1
RNDDQNAgent.min_replay_history = 50000  # agent steps
RNDDQNAgent.update_period = 4
RNDDQNAgent.target_update_period = 10000  # agent steps
RNDDQNAgent.epsilon_train = 0.01
RNDDQNAgent.epsilon_eval = 0.001
RNDDQNAgent.epsilon_decay_period = 1000000  # agent steps
RNDDQNAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
RNDDQNAgent.optimizer = @tf.train.RMSPropOptimizer()

tf.train.RMSPropOptimizer.learning_rate = 0.00025
tf.train.RMSPropOptimizer.decay = 0.95
tf.train.RMSPropOptimizer.momentum = 0.0
tf.train.RMSPropOptimizer.epsilon = 0.00001
tf.train.RMSPropOptimizer.centered = True

# Parameters for the intrinsic motivation method
RNDIntrinsicReward.reward_scale = 0.00005
RNDIntrinsicReward.optimizer = @tf.train.AdamOptimizer()
tf.train.AdamOptimizer.learning_rate = 0.0001
tf.train.AdamOptimizer.epsilon = 0.00001

atari_lib.create_atari_environment.game_name = 'MontezumaRevenge'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
atari_lib.create_atari_environment.sticky_actions = True
AtariPreprocessing.terminal_on_life_loss = False
Runner.num_iterations = 200
Runner.training_steps = 250000  # agent steps
Runner.evaluation_steps = 125000  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

WrappedReplayBuffer.replay_capacity = 1000000
WrappedReplayBuffer.batch_size = 32
